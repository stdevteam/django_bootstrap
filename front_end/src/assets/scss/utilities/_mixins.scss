@mixin font-face($font-name, $file-name, $weight: normal, $style: normal) {
    @font-face {
        font-family: quote($font-name);
        src: url($file-name + '.eot');
        src: url($file-name + '.eot?#iefix') format('embedded-opentype'),
        url($file-name + '.woff') format('woff'),
        url($file-name + '.ttf') format('truetype'),
        url($file-name + '.svg##{$font-name}') format('svg');
        font-weight: $weight;
        font-style: $style;
    }
}

@mixin box-sizing($type: border-box) {
    -webkit-box-sizing: $type;
    box-sizing: $type;
}

@mixin placeholder {
    &::-webkit-input-placeholder {
        @content
    }
    &:-moz-placeholder {
        @content
    }
    &::-moz-placeholder {
        @content
    }
    &:-ms-input-placeholder {
        @content
    }
}

@mixin box-shadow($args...) {
    -webkit-box-shadow: $args;
    -moz-box-shadow: $args;
    box-shadow: $args;
}

@mixin box-shadow-inset($args...) {
    -webkit-box-shadow: 'inset' + $args;
    -moz-box-shadow: 'inset' + $args;
    box-shadow: inset + ' ' + $args;
}

@mixin transform($transforms) {
	-moz-transform: $transforms;
	-o-transform: $transforms;
	-ms-transform: $transforms;
	-webkit-transform: $transforms;
	transform: $transforms;
}

@mixin transform-origin($args...) {
	-webkit-transform-origin: $args;
	-ms-transform-origin: $args;
	transform-origin: $args;
}

@mixin transition($args...) {
    -webkit-transition: $args;
    -o-transition: $args;
    transition: $args;
}

@mixin translate($x: 0, $y: 0) {
    -webkit-transform: translate($x, $y);
    -ms-transform: translate($x, $y);
    transform: translate($x, $y);
}

@mixin translate3d($x: 0, $y: 0, $z: 0) {
    -webkit-transform: translate3d($x, $y, $z);
    transform: translate3d($x, $y, $z);
}

@mixin rotate($deg) {
    -ms-transform: rotate($deg);
    transform: rotate($deg);
    -webkit-transform: rotate($deg);
}

@mixin rotateY($deg) {
    -webkit-transform: rotateY($deg);
    transform: rotateY($deg);
}

@mixin scale($n) {
    -webkit-transform: scale($n);
    -ms-transform: scale($n);
    transform: scale($n);
}

@mixin scale3d($args...) {
    -webkit-transform: scale3d($args);
    transform: scale3d($args);
}

@mixin block-overlay {
    content: '';
    position: absolute;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
}

@mixin ellipsis($width) {
    max-width: $width;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

@mixin clearfix {
  &:before,
  &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}

@mixin center($position) {
    position: absolute;
    @if $position=='vertical' {
        top: 50%;
        @include translate($y: -50%);
    }
    @else if $position=='horizontal' {
        left: 50%;
        @include translate($x: -50%);
    }
    @else if $position=='both' {
        top: 50%;
        left: 50%;
        @include translate($x: -50%, $y: -50%);
    }
}

@mixin position($type, $left: null, $right: null, $top: null, $bottom: null) {
    position: $type;
    top: $top;
    right: $right;
    bottom: $bottom;
    left: $left;
}

@mixin bg-img($img: null, $bg-color: null, $repeat: null, $position: null, $bg-size: null, $bg-attachment: null) {
    background: $bg-color url($images-folder + $img) $repeat $position;
    background-size: $bg-size;
    background-attachment: $bg-attachment;
}

@mixin gradient($start-color, $end-color, $orientation) {
    background: $start-color;
    @if $orientation==vertical {
        background: -moz-linear-gradient(top, $start-color 0%, $end-color 100%);
        background: -webkit-gradient(linear, left top, left bottom, color-stop(0%, $start-color), color-stop(100%, $end-color));
        background: -webkit-linear-gradient(top, $start-color 0%, $end-color 100%);
        background: -o-linear-gradient(top, $start-color 0%, $end-color 100%);
        background: -ms-linear-gradient(top, $start-color 0%, $end-color 100%);
        background: linear-gradient(to bottom, $start-color 0%, $end-color 100%);
        filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$start-color', endColorstr='$end-color', GradientType=0);
    }
    @else if $orientation==horizontal {
        background: -moz-linear-gradient(left, $start-color 0%, $end-color 100%);
        background: -webkit-gradient(linear, left top, right top, color-stop(0%, $start-color), color-stop(100%, $end-color));
        background: -webkit-linear-gradient(left, $start-color 0%, $end-color 100%);
        background: -o-linear-gradient(left, $start-color 0%, $end-color 100%);
        background: -ms-linear-gradient(left, $start-color 0%, $end-color 100%);
        background: linear-gradient(to right, $start-color 0%, $end-color 100%);
        filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$start-color', endColorstr='$end-color', GradientType=1);
    }
    @else if $orientation==radial {
        background: -moz-radial-gradient(center, ellipse cover, $start-color 0%, $end-color 100%);
        background: -webkit-gradient(radial, center center, 0px, center center, 100%, color-stop(0%, $start-color), color-stop(100%, $end-color));
        background: -webkit-radial-gradient(center, ellipse cover, $start-color 0%, $end-color 100%);
        background: -o-radial-gradient(center, ellipse cover, $start-color 0%, $end-color 100%);
        background: -ms-radial-gradient(center, ellipse cover, $start-color 0%, $end-color 100%);
        background: radial-gradient(ellipse at center, $start-color 0%, $end-color 100%);
        filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$start-color', endColorstr='$end-color', GradientType=1);
    }
}

@mixin display-flex {
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
}

@mixin justify-center {
    -webkit-box-pack: center;
    -ms-flex-pack: center;
    justify-content: center;
}

@mixin justify-around {
    -ms-flex-pack: distribute;
    justify-content: space-around;
}

@mixin justify-between {
    -webkit-box-pack: justify;
    -ms-flex-pack: justify;
    justify-content: space-between;
}

@mixin justify-start {
    -webkit-box-pack: start;
    -ms-flex-pack: start;
    justify-content: flex-start;
}

@mixin justify-end {
    -webkit-box-pack: end;
    -ms-flex-pack: end;
    justify-content: flex-end;
}

@mixin align-center {
    -webkit-box-align: center;
    -ms-flex-align: center;
    align-items: center;
}

@mixin align-start {
    -webkit-box-align: start;
    -ms-flex-align: start;
    align-items: flex-start;
}

@mixin align-end {
    -webkit-box-align: end;
    -ms-flex-align: end;
    align-items: flex-end;
}

@mixin align-self-end {
    -ms-flex-item-align: end;
    align-self: flex-end;
}

@mixin align-self-start {
    -ms-flex-item-align: start;
    align-self: flex-start;
}

@mixin flex-wrap {
    -ms-flex-wrap: wrap;
    flex-wrap: wrap;
}

@mixin dir-col {
    -webkit-box-orient: vertical;
    -webkit-box-direction: normal;
    -ms-flex-direction: column;
    flex-direction: column;
}

@mixin dir-col-reverse {
	-webkit-box-orient: vertical;
	-webkit-box-direction: normal;
	-ms-flex-direction: column-reverse;
	flex-direction: column-reverse;
}

@mixin dir-row {
    -webkit-box-orient: horizontal;
    -webkit-box-direction: normal;
    -ms-flex-direction: row;
    flex-direction: row;
}

@mixin dir-row-reverse {
	-webkit-box-orient: horizontal;
	-webkit-box-direction: normal;
	-ms-flex-direction: row-reverse;
	flex-direction: row-reverse;
}

@mixin order($n) {
    -webkit-box-ordinal-group: $n + 1;
    -ms-flex-order: $n;
    order: $n;
}

@mixin flex-grow($n) {
	-webkit-box-flex: $n;
	-ms-flex-positive: $n;
	flex-grow: $n;
}

@mixin animation($animation) {
    -webkit-animation: $animation;
    -o-animation: $animation;
    animation: $animation;
}

@mixin keyframes($animation-name) {
  @-webkit-keyframes #{$animation-name} {
    @content;
  }
  @-moz-keyframes #{$animation-name} {
    @content;
  }
  @-ms-keyframes #{$animation-name} {
    @content;
  }
  @-o-keyframes #{$animation-name} {
    @content;
  }
  @keyframes #{$animation-name} {
    @content;
  }
}

@mixin animation-delay($s){
	-webkit-animation-delay: $s;
	animation-delay: $s;
}

@mixin animation-duration($s){
	-webkit-animation-duration: $s;
	animation-duration: $s;
}

@mixin column($count, $gap){
  -webkit-column-count: $count;
  -moz-columns: $count;
  column-count: $count;
  -webkit-column-gap: $gap;
  -moz-column-gap: $gap;
  column-gap: $gap;
}

@mixin break-inside($break: avoid){
  -webkit-column-break-inside: $break;
  page-break-inside: $break;
  break-inside: $break;
}